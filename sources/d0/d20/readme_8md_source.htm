<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>LightJason - AgentSpeak(L++): readme.md Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../layout.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">LightJason - AgentSpeak(L++)
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d0/d20/readme_8md.htm','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">readme.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d0/d20/readme_8md.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;# LightJason - AgentSpeak(L++)</div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;![Circle CI](https://circleci.com/gh/LightJason/AgentSpeak.svg?style=shield)</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;![Coverage Status](https://coveralls.io/repos/github/LightJason/AgentSpeak/badge.svg?branch=master)</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;Based on the project [Jason](http://jason.sourceforge.net/) by Jomi F. HÃ¼bner and Rafael H. Bordini</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;a Java 8 implementation has been build-up with parallel execution calls. The version defines an additional [AgentSpeak(L)](https://en.wikipedia.org/wiki/AgentSpeak) grammar based on</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;[AntLR](http://www.antlr.org/) for simulating a [multi-agent system](https://en.wikipedia.org/wiki/Multi-agent_system)</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;with a fuzzy-based logical calculus and grammar features like lambda expressions. Agent execution based on a mathematical structure</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;to describe an optimizing process by a [finite-state-machine](https://en.wikipedia.org/wiki/Finite-state_machine)</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;* [Contribution Guidelines](contributing.md)</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;* [Code-of-Conduct](code_of_conduct.md)</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;## Requirements</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;* [JRE 1.8](http://www.java.com/)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;### Development</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;* [JDK 1.8](http://www.oracle.com/technetwork/java/javase/downloads/)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;* [Maven 3 or higher](http://maven.apache.org/)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;* [Doxygen](http://www.doxygen.org/) with [GraphViz](http://www.graphviz.org/)</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;* [Source code documentation](http://lightjason.github.io/AgentSpeak/)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;* [Open Hub Code Statistic](https://www.openhub.net/p/LightJason-AgentSpeak)</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;* [Coveralls.io Statistic](https://coveralls.io/github/LightJason/AgentSpeak)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;* [Libraries.io Statistic](https://libraries.io/github/LightJason/AgentSpeak)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;## Base Definitions</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;### &lt;a name=&quot;belief&quot;&gt;Beliefs&lt;/a&gt;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;* Beliefs implicitly describe the current state of the agent</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;* Beliefs will be updated before the cycle is run (beliefbase uses an update mechanism)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;* Beliefs must be exists iif an expression is computed (beliefs can be exist on the fly)</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;* Belief addition triggers a plan with the definition ```+belief``` </div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;* Belief retraction triggers a plan with the definition ```-belief```</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;* Belief modification with ```-+``` does not exists anymore </div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;* [Variables](#variable) within a belief literal will be unified before the belief is added to the beliefbase</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;### &lt;a name=&quot;action&quot;&gt;Actions&lt;/a&gt;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;* Actions will be run immediately</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;* Actions can fail (false) or succeed (true)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;* There is no difference between internal and external actions</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;* Actions can be also a logical or assignment expression (these are always true)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;* Actions with ```@```-prefix wil be executed in parallel (each inner action will be run in parallel)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;### &lt;a name=&quot;plan&quot;&gt;Plans&lt;/a&gt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;* Plans are _sequences of [actions](#action), [rules](#rule) and/or achievement / test [goals](#goal)_</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;* Plans has got an optional context, that defines a constraint for execution (default is true and matches always)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;* Plans fail iif an item of the plan fails</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;* Plans returns a boolean value which defines fail (false) and success (true)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;* Plans run items in sequential order on default</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;* If the plan calls an _achievement [goal](#goal) addition_, the [goal](#goal) is added to the global [goal](#goal) list and the current plan will be continued, the _achievement [goal](#goal)_ will be run within the next cycle</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;* An _achievement [goal](#goal) deletion_ does not exists anymore</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;* All items results will be concatenated with a logical _and_ to calculate the plan result value</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    </div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;#### &lt;a name=&quot;planinternal&quot;&gt;Internals Constants&lt;/a&gt;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;* The plan has got additional [constant variables](#variable), that are added in the context condition (values are calculated before plan execution is started)</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    * _PlanFail_ stores the number of fail runs and _PlanFailRatio_ normalized value in [0,1]</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    * _PlanSuccessful_ stores the number of successful runs and _PlanSuccessfulRatio_ normalized value in [0,1] </div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    * _PlanRuns_ number of runs of the plan (fail + successful runs)</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    </div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;#### &lt;a name=&quot;fuzzy&quot;&gt;Fuzziness&lt;/a&gt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;* Fuzzy value must be in [0,1]</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;* Each [action](#action) in a fuzzy-plan returns also a fuzzy value to define the fuzziness</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;* The [plan](#plan) or [rule](#rule) result returns true / false and the aggregated fuzzy value</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;### &lt;a name=&quot;rule&quot;&gt;Rules&lt;/a&gt;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;* Rules are similar to [plans](#plan) without the context condition</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;* Rules cannot be triggered by a goal, so they must be called from a plan</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;* Rules will be executed with the prefix ```$```</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;* Rules run immediatly</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;* Rules run sequentially on default</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;* Rules returns a boolean value which defines fail (false) and success (true)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;* All items results will be concatinate with a logical _and_ to calculate the plan result value</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;* [Variables](#variable) will be passed, so if a rules succeed the value of the variable will be passed back to the calling plan</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;### &lt;a name=&quot;annotation&quot;&gt;Rule / Plan Annotation&lt;/a&gt;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;* Annotations can modify a plan / rule behaviour to change runtime semantic</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;* The following annotation can be used</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    * ```@Constant( AnyValue, 5 )``` creates the given constant variable</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    * ```@Atomic``` the plan / rule cannot be fail, it returns always true (only the [actions](#action) can fail)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    * ```@Parallel``` all items will be run in parallel</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;### &lt;a name=&quot;goal&quot;&gt;Goals&lt;/a&gt;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;* Semantically a goal marks a certain state of the world an agent _wishes to bring about_ [AgentSpeak, p.40]</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;* _Achievement goals_ triggers an _achievement goal addition_ which leads to the execution of a corresponding [plan](#plan)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;* On agent start, there can exists one _initial goal_ only (like the ```main``` function in Java, C/C++)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;* Each agent can track _more than one goal_ at the same time otherwise the agent idles (the suspending state is not used)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;* Goals are triggered by external events which will match by the goal name</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;* Goals will be resolved into [plans](#plan) with equal name (and allowed context), the [plan](#plan) is the intantiiation of the goal</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;* Goals are run in parallel independed from other goals</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;* A goal is a sequence of [plans](#plan) which must all finished successfully</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;* A goal is part of exactly one [intention](#intention)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;* If a goal can match a [desire](#desire) (the goal is near to the desire) it can add an event to match the desire [belief](#belief)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;* If the agent is in sleeping / hibernate state and the ```wakeup``` method is called, it triggers the wakeup-goal</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;#### &lt;a name=&quot;testgoal&quot;&gt;Test Goals&lt;/a&gt;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;* A test goal is an atom with the definition ```?literal``` </div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;* The test return true iif a plan with an equal literal is within the current execution context (current running)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;### &lt;a name=&quot;intention&quot;&gt;Intentions&lt;/a&gt;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;* An intention is the _convex hull_ of its [goals](#goal)</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;* The intention is set of of goals, which must exist simultaneously </div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;* Intentions cannot be in conflict with other intentions, so there dies not exists any overlaping</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;### &lt;a name=&quot;desire&quot;&gt;Desires&lt;/a&gt;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;* A Desire is a vertex of the edge of all intentions</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;* Desires are defined by a set of beliefs</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;* Desires can be in conflict with other desires, represented that the desires have got a large distance (much as possible) </div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;* The desire is successfully reached, iif all beliefs are existing anytime</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;### &lt;a name=&quot;variable&quot;&gt;Variables&lt;/a&gt;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;* Variables are written with an upper-case letter at begin</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;* Thread-safe variables for parallel runtime start with ```@``` (at-sign) followed by an upper-case letter</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;* Variables can store a literal or string to call a [rule](#rule) or [plan](#plan) e.g. ```!X(3,2)``` calls a plan or ```$X(2,1)``` calls a rule</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;### &lt;a name=&quot;at-annotation&quot;&gt;Action / Term Annotation&lt;/a&gt;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;* In LightJason one can specify HOW actions and terms will be executed / unified.</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;* Concept of ```action-term-annotation```s allows to annotate ```actions```, and ```terms``` to perform</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    * unification (```&gt;&gt;```)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    * parallel execution (```@```), see [Variables](#variable) and _lambda expressions_.</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    * ...</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;* If more than one ```action-term-annotation``` is needs to be added, they have to be ordered according to the rule: _First HOW, then WHAT_, e.g. ```@&gt;&gt;``` (parallel unification)</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;* To annotate multiple actions/terms brackets ```(```,```)``` can be used. See the following examples</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;* Examples</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    * ```@&gt;&gt;( foo(X), X &gt; 1 ) &amp;&amp; Value &gt; 0.5``` (unify ```foo(X)``` and ```X &gt; 1``` in parallel and if this results in a true statement check whether ```Value &gt; 0.5```)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    * ```&gt;&gt;foo(X) &amp;&amp; X &gt; 1 &amp;&amp; Value &gt; 0.5``` (unify ```foo(X)```, then test the following terms sequentially)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;## &lt;a name=&quot;graphic&quot;&gt;Graphical Representation&lt;/a&gt; </div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;![Structure](bdi.png)</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;## Coding - Agent</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;* Agent (ASL) can be defined as a logic program with [beliefs](#belief), [rules](#rule) and [plans](#plan)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;* The agent execution structure can be described as a _finite-state machine_ which execute the state changing based on an event processing</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;* Agents must be run (triggered) by an external runtime e.g. from an outside system component</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;* [Plans](#plan) can be bundeled in a _plan-bundle_ which is semantic equal to a class, plan-bundles can be included in an agent</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;* The [execution semantic](https://lightjason.github.io/knowledgebase/differencetojason/) in comparation to Jason (see chapter 10.1 [AgentSpeak, p.207])</div></div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d0/d20/readme_8md.htm">readme.md</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
