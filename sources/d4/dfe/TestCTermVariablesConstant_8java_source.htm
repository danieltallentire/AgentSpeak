<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>LightJason - AgentSpeak(L++): TestCTermVariablesConstant.java Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../layout.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">LightJason - AgentSpeak(L++)
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d4/dfe/TestCTermVariablesConstant_8java_source.htm','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">TestCTermVariablesConstant.java</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d4/dfe/TestCTermVariablesConstant_8java.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @cond LICENSE</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * ######################################################################################</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * # LGPL License                                                                       #</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * #                                                                                    #</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * # This file is part of the LightJason AgentSpeak(L++)                                #</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * # Copyright (c) 2015-17, LightJason (info@lightjason.org)                            #</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * # This program is free software: you can redistribute it and/or modify               #</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * # it under the terms of the GNU Lesser General Public License as                     #</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * # published by the Free Software Foundation, either version 3 of the                 #</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * # License, or (at your option) any later version.                                    #</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * #                                                                                    #</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * # This program is distributed in the hope that it will be useful,                    #</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * # but WITHOUT ANY WARRANTY; without even the implied warranty of                     #</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      #</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * # GNU Lesser General Public License for more details.                                #</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * #                                                                                    #</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * # You should have received a copy of the GNU Lesser General Public License           #</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * # along with this program. If not, see http://www.gnu.org/licenses/                  #</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * ######################################################################################</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * @endcond</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">package </span>org.lightjason.agentspeak.language;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">import</span> com.codepoetics.protonpack.StreamUtils;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.junit.Assert;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.junit.Test;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../db/da9/classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest.htm">IBaseTest</a>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d0/d73/namespaceorg_1_1lightjason_1_1agentspeak_1_1common.htm">common</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">language</a>.<a class="code" href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">variable</a>.<a class="code" href="../../d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant.htm">CConstant</a>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">language</a>.<a class="code" href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">variable</a>.<a class="code" href="../../d4/d76/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CMutexVariable.htm">CMutexVariable</a>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">language</a>.<a class="code" href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">variable</a>.<a class="code" href="../../d9/db9/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateMutexVariable.htm">CRelocateMutexVariable</a>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">language</a>.<a class="code" href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">variable</a>.<a class="code" href="../../d7/df2/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateVariable.htm">CRelocateVariable</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">language</a>.<a class="code" href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">variable</a>.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable</a>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">import</span> <a class="code" href="../../db/d96/namespaceorg.htm">org</a>.<a class="code" href="../../d1/de7/namespaceorg_1_1lightjason.htm">lightjason</a>.<a class="code" href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">agentspeak</a>.<a class="code" href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">language</a>.<a class="code" href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">variable</a>.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm">   44</a></span>&#160;<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class </span><a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm">TestCTermVariablesConstant</a> <span class="keyword">extends</span> <a class="code" href="../../db/da9/classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest.htm">IBaseTest</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;{</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    @Test</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a2c2743458fb9686e7089f2bebf7cb463">   51</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a2c2743458fb9686e7089f2bebf7cb463">literal</a>()</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm">ILiteral</a> l_emptyliteral = <a class="code" href="../../d6/d08/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral.htm">CLiteral</a>.<a class="code" href="../../d6/d08/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral.htm#a21c3b3bf99c549beac905342eb37602b">from</a>( <span class="stringliteral">&quot;foo/bar&quot;</span> );</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        Assert.assertEquals( l_emptyliteral.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;bar&quot;</span> );</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        Assert.assertEquals( l_emptyliteral.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#aeed55c5adc71d437f41af6ba40dc7677">fqnfunctor</a>(), <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;foo/bar&quot;</span> ) );</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        Assert.assertFalse( l_emptyliteral.<a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#a5daabca8416030ca262bc1365b040b8e">hasAt</a>() );</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        Assert.assertTrue( l_emptyliteral.<a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#ab199d093499d6af1ee4edbb4a38b28d5">emptyValues</a>() );</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm">ILiteral</a> l_valueliteral = <a class="code" href="../../d6/d08/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral.htm">CLiteral</a>.<a class="code" href="../../d6/d08/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral.htm#a21c3b3bf99c549beac905342eb37602b">from</a>( <span class="stringliteral">&quot;foo/value&quot;</span>, <a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm">CRawTerm</a>.<a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm#a95c5d82dfc6d8ba46b478b1e5d34f1e5">from</a>( 5 ), <a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm">CRawTerm</a>.<a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm#a95c5d82dfc6d8ba46b478b1e5d34f1e5">from</a>( <span class="stringliteral">&quot;hello&quot;</span> ) );</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        Assert.assertEquals( l_valueliteral.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;value&quot;</span> );</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        Assert.assertEquals( l_valueliteral.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#aeed55c5adc71d437f41af6ba40dc7677">fqnfunctor</a>(), <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;foo/value&quot;</span> ) );</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        Assert.assertFalse( l_valueliteral.<a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#a5daabca8416030ca262bc1365b040b8e">hasAt</a>() );</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        Assert.assertFalse( l_valueliteral.<a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#ab199d093499d6af1ee4edbb4a38b28d5">emptyValues</a>() );</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        Assert.assertTrue(</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            StreamUtils.zip(</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                Stream.of( 5, <span class="stringliteral">&quot;hello&quot;</span> ),</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                l_valueliteral.<a class="code" href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#a7f59198401ff8cebe3e17971e3f0f36e">values</a>(),</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                ( i, j ) -&gt; i.equals( j.raw() )</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            ).allMatch( i -&gt; i )</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        );</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    @Test</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#aca4ab34cfc023ea0cf556eccacc84d6e">   83</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#aca4ab34cfc023ea0cf556eccacc84d6e">rawterm</a>()</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm">ITerm</a> l_stringterm = <a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm">CRawTerm</a>.<a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm#a95c5d82dfc6d8ba46b478b1e5d34f1e5">from</a>( <span class="stringliteral">&quot;hello&quot;</span> );</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_stringterm, String.class ) );</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        Assert.assertEquals( l_stringterm.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), <span class="stringliteral">&quot;hello&quot;</span> );</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keyword">final</span> <span class="keywordtype">double</span> l_value = Math.random();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm">ITerm</a> l_numberterm = <a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm">CRawTerm</a>.<a class="code" href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm#a95c5d82dfc6d8ba46b478b1e5d34f1e5">from</a>( l_value );</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_numberterm, Number.class ) );</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_numberterm, Double.class ) );</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        Assert.assertEquals( <span class="stringliteral">&quot;number value&quot;</span>, l_numberterm.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), l_value, 0 );</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    @Test( expected = RuntimeException.class )</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a6467dee0a5f334b70a8f1ca4fabcd410">  104</a></span>&#160;    public final <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a6467dee0a5f334b70a8f1ca4fabcd410">constantaccess</a>()</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    {</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">new</span> <a class="code" href="../../d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant.htm">CConstant&lt;&gt;</a>( <span class="stringliteral">&quot;CA&quot;</span>, 5 ).<span class="keyword">set</span>( 10 );</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    }</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    @Test</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a5dec8d3402ce12e4d03729bedb4d9821">  114</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a5dec8d3402ce12e4d03729bedb4d9821">constant</a>()</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">final</span> <span class="keywordtype">double</span> l_value = Math.random();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm">ITerm</a> l_constant = <span class="keyword">new</span> <a class="code" href="../../d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant.htm">CConstant&lt;&gt;</a>( <span class="stringliteral">&quot;C&quot;</span>, l_value );</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        Assert.assertEquals( l_constant.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;C&quot;</span> );</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        Assert.assertTrue( l_constant.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a6467e3a0aca6bb84b8fc87bccad833b7">hasVariable</a>() );</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_constant, Number.class ) );</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_constant, Double.class ) );</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        Assert.assertEquals( <span class="stringliteral">&quot;constant number value&quot;</span>, l_constant.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), l_value, 0 );</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    @Test</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#af93087bdaa1eb258ae07b862b757e4cc">  130</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#af93087bdaa1eb258ae07b862b757e4cc">constantcopy</a>()</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        Assert.assertEquals(</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant.htm">CConstant&lt;&gt;</a>( <span class="stringliteral">&quot;const/value&quot;</span>, <span class="stringliteral">&quot;test&quot;</span> ).shallowcopysuffix().functor(),</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="stringliteral">&quot;value&quot;</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        );</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        Assert.assertEquals(</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant.htm">CConstant&lt;&gt;</a>( <span class="stringliteral">&quot;const/value&quot;</span>, <span class="stringliteral">&quot;test&quot;</span> ).shallowcopy( <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;xxx&quot;</span> ) ).fqnfunctor().<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a99045eb1954b18d9458f71c13e17b8b3">toString</a>(),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="stringliteral">&quot;xxx/const/value&quot;</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        );</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    @Test( expected = IllegalStateException.class )</div><div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a403a4f9c9ffe014054803c141fce1bc2">  147</a></span>&#160;    public final <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a403a4f9c9ffe014054803c141fce1bc2">variableany</a>()</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable&lt;?&gt;</a> l_variable = <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;Object&gt;</a>( <span class="stringliteral">&quot;_&quot;</span> );</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#afcadb0441134b2d0c6c3afa738e3d269">any</a>() );</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        Assert.assertFalse( l_variable.allocated() );</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        l_variable.thrownotallocated();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    @Test( expected = IllegalArgumentException.class )</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#aa7c6fd05b3952d52a42481c682fff940">  162</a></span>&#160;    public final <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#aa7c6fd05b3952d52a42481c682fff940">variablevalueassignable</a>()</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;Object&gt;</a>( <span class="stringliteral">&quot;num&quot;</span>, 123 ).throwvaluenotassignableto( String.class );</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    @Test</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a963f065f91400b4ebcfc0dd4a0d8b02b">  171</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a963f065f91400b4ebcfc0dd4a0d8b02b">variableequals</a>()</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        Assert.assertEquals(</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;Object&gt;</a>( <span class="stringliteral">&quot;foo&quot;</span>, <span class="stringliteral">&quot;str&quot;</span> ),</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;Object&gt;</a>( <span class="stringliteral">&quot;foo&quot;</span>, 123 )</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        );</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        Assert.assertEquals(</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;eq&quot;</span>, 56  ),</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;eq&quot;</span>, 56 )</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        );</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    @Test</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#af914b75b4fd5e1d14e87ba3d3bffeb8d">  188</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#af914b75b4fd5e1d14e87ba3d3bffeb8d">variabletostring</a>()</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        Assert.assertEquals( <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;data&quot;</span> ).toString(), <span class="stringliteral">&quot;data()&quot;</span> );</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        Assert.assertEquals( <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;data&quot;</span>, <span class="stringliteral">&quot;value&quot;</span> ).toString(), <span class="stringliteral">&quot;data(value)&quot;</span> );</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    @Test</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#acc44ca43258b5fff09ca4f6a8c365488">  199</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#acc44ca43258b5fff09ca4f6a8c365488">variable</a>()</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        Assert.assertTrue( <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;_&quot;</span> ).any() );</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordtype">double</span> l_value = Math.random();</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable&lt;Number&gt;</a> l_variable = <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;V&quot;</span>, l_value );</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        Assert.assertEquals( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;V&quot;</span> );</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        Assert.assertFalse( l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#a59a744f432a4f5f86e39dc0a6e8700e4">mutex</a>() );</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a6467e3a0aca6bb84b8fc87bccad833b7">hasVariable</a>() );</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_variable, Number.class ) );</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_variable, Double.class ) );</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        Assert.assertEquals( <span class="stringliteral">&quot;get variable number value&quot;</span>, l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), l_value, 0 );</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        l_value = Math.random();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#ae287ef1aed18b2c65d6e27b9ce187c6d">set</a>( l_value );</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        Assert.assertEquals( <span class="stringliteral">&quot;set variable number value&quot;</span>, l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), l_value, 0 );</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#ae287ef1aed18b2c65d6e27b9ce187c6d">set</a>( null );</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        Assert.assertFalse( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    @Test</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a83ce3fda9f9b289fb2f4b391328a5d87">  230</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a83ce3fda9f9b289fb2f4b391328a5d87">variablefunctor</a>()</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    {</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        Assert.assertEquals(</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;prefix/name&quot;</span> ).functorpath(),</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;prefix&quot;</span> )</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        );</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    @Test</div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a8500e0573588527d6c0a67994b49e546">  242</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a8500e0573588527d6c0a67994b49e546">variablemutex</a>()</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordtype">double</span> l_value = Math.random();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable&lt;Number&gt;</a> l_variable = <span class="keyword">new</span> <a class="code" href="../../d4/d76/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CMutexVariable.htm">CMutexVariable&lt;&gt;</a>( <span class="stringliteral">&quot;V&quot;</span>, l_value );</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        Assert.assertEquals( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;V&quot;</span> );</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#a59a744f432a4f5f86e39dc0a6e8700e4">mutex</a>() );</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a6467e3a0aca6bb84b8fc87bccad833b7">hasVariable</a>() );</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_variable, Number.class ) );</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        Assert.assertTrue( <a class="code" href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">CCommon</a>.rawvalueAssignableTo( l_variable, Double.class ) );</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        Assert.assertEquals( <span class="stringliteral">&quot;get mutex variable number value&quot;</span>, l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), l_value, 0 );</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        l_value = Math.random();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#ae287ef1aed18b2c65d6e27b9ce187c6d">set</a>( l_value );</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        Assert.assertEquals( <span class="stringliteral">&quot;set mutex variable number value&quot;</span>, l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), l_value, 0 );</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        l_variable.<a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#ae287ef1aed18b2c65d6e27b9ce187c6d">set</a>( null );</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        Assert.assertFalse( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    @Test</div><div class="line"><a name="l00270"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a6295d78b1b92db23c798d2be9ae11b54">  270</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a6295d78b1b92db23c798d2be9ae11b54">variablecopy</a>()</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable&lt;?&gt;</a> l_variable = <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;prefix/copy&quot;</span>, <span class="keyword">new</span> Object()  );</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        Assert.assertEquals( l_variable.shallowcopysuffix().fqnfunctor(), <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;copy&quot;</span> ) );</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        Assert.assertEquals( l_variable.shallowcopy( <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;xxx&quot;</span> ) ).fqnfunctor(), <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;xxx/prefix/copy&quot;</span> ) );</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        Assert.assertEquals( l_variable.shallowcopysuffix().&lt;Object&gt;raw(), l_variable.&lt;Object&gt;raw() );</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm">ITerm</a> l_deep = l_variable.deepcopy( <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;foo&quot;</span> ) );</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        Assert.assertEquals( l_deep.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#aeed55c5adc71d437f41af6ba40dc7677">fqnfunctor</a>(), <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;prefix/copy/foo&quot;</span> ) );</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        Assert.assertNotEquals( l_deep.&lt;Object&gt;raw(), l_variable.&lt;Object&gt;raw() );</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm">ITerm</a> l_deepsuffix = l_variable.deepcopysuffix();</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        Assert.assertEquals( l_deepsuffix.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#aeed55c5adc71d437f41af6ba40dc7677">fqnfunctor</a>(), <a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">CPath</a>.<a class="code" href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">from</a>( <span class="stringliteral">&quot;copy&quot;</span> ) );</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        Assert.assertNotEquals( l_deepsuffix.&lt;Object&gt;raw(), l_variable.&lt;Object&gt;raw() );</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    @Test</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a106e4e4d019e543c2ef5b80b6250c0a9">  292</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a106e4e4d019e543c2ef5b80b6250c0a9">relocatevariablerelocate</a>()</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable&lt;String&gt;</a> l_variable = <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;RA&quot;</span> );</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d7/df2/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateVariable.htm">CRelocateVariable&lt;String&gt;</a> l_relocate = <span class="keyword">new</span> <a class="code" href="../../d7/df2/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateVariable.htm">CRelocateVariable&lt;&gt;</a>( l_variable );</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        Assert.assertFalse( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a77467be5e42d93df3790ead9dad5d9ac">mutex</a>() );</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        Assert.assertEquals( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;RA&quot;</span> );</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        Assert.assertEquals( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a173a2eac033e0671a5b317ac3300be8f">functor</a>(), <span class="stringliteral">&quot;RA&quot;</span> );</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        Assert.assertFalse( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        Assert.assertFalse( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ab1a2917c7de499149bf3c68e54635910">allocated</a>() );</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a6467e3a0aca6bb84b8fc87bccad833b7">hasVariable</a>() );</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        Assert.assertTrue( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a2fed2b0c5316fc7b0a7a2f77659ac3a0">hasVariable</a>() );</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ac91b9eb961ec37626e279956649fdfc1">set</a>( <span class="stringliteral">&quot;relocated foo&quot;</span> );</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        Assert.assertTrue( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ab1a2917c7de499149bf3c68e54635910">allocated</a>() );</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        Assert.assertEquals( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ac352b3d9d73b4f936bbacc618f5d1876">raw</a>(), <span class="stringliteral">&quot;relocated foo&quot;</span> );</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        l_relocate.relocate();</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        Assert.assertEquals( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), <span class="stringliteral">&quot;relocated foo&quot;</span> );</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    @Test</div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a899367cab11bc97ec1487ec47fe0c0e2">  324</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a899367cab11bc97ec1487ec47fe0c0e2">relocatevariablemutex</a>()</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">IVariable&lt;String&gt;</a> l_variable = <span class="keyword">new</span> <a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">CVariable&lt;&gt;</a>( <span class="stringliteral">&quot;RAM&quot;</span> );</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keyword">final</span> <a class="code" href="../../d9/db9/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateMutexVariable.htm">CRelocateMutexVariable&lt;String&gt;</a> l_relocate = <span class="keyword">new</span> <a class="code" href="../../d9/db9/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateMutexVariable.htm">CRelocateMutexVariable&lt;&gt;</a>( l_variable );</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        Assert.assertTrue( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a77467be5e42d93df3790ead9dad5d9ac">mutex</a>() );</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        Assert.assertEquals( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">functor</a>(), <span class="stringliteral">&quot;RAM&quot;</span> );</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        Assert.assertEquals( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a173a2eac033e0671a5b317ac3300be8f">functor</a>(), <span class="stringliteral">&quot;RAM&quot;</span> );</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        Assert.assertFalse( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        Assert.assertFalse( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ab1a2917c7de499149bf3c68e54635910">allocated</a>() );</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a6467e3a0aca6bb84b8fc87bccad833b7">hasVariable</a>() );</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        Assert.assertTrue( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a2fed2b0c5316fc7b0a7a2f77659ac3a0">hasVariable</a>() );</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ac91b9eb961ec37626e279956649fdfc1">set</a>( <span class="stringliteral">&quot;relocated mutex foo&quot;</span> );</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        Assert.assertTrue( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ab1a2917c7de499149bf3c68e54635910">allocated</a>() );</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        Assert.assertEquals( l_relocate.<a class="code" href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ac352b3d9d73b4f936bbacc618f5d1876">raw</a>(), <span class="stringliteral">&quot;relocated mutex foo&quot;</span> );</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        l_relocate.relocate();</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        Assert.assertTrue( l_variable.<a class="code" href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">allocated</a>() );</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        Assert.assertEquals( l_variable.<a class="code" href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">raw</a>(), <span class="stringliteral">&quot;relocated mutex foo&quot;</span> );</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a11584d557e4c5db238aa47907bc2907c">  358</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a11584d557e4c5db238aa47907bc2907c">main</a>( <span class="keyword">final</span> String[] p_args )</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    {</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keyword">new</span> <a class="code" href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm">TestCTermVariablesConstant</a>().<a class="code" href="../../db/da9/classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest.htm#a153155d721393465604d8e795ad2fc31">invoketest</a>();</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div><div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_ac91b9eb961ec37626e279956649fdfc1"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ac91b9eb961ec37626e279956649fdfc1">org.lightjason.agentspeak.language.variable.CVariable.set</a></div><div class="ttdeci">IVariable&lt; T &gt; set( @Nullable final T p_value)</div><div class="ttdoc">sets the value </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00112">CVariable.java:112</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a5dec8d3402ce12e4d03729bedb4d9821"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a5dec8d3402ce12e4d03729bedb4d9821">org.lightjason.agentspeak.language.TestCTermVariablesConstant.constant</a></div><div class="ttdeci">final void constant()</div><div class="ttdoc">test constant structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00114">TestCTermVariablesConstant.java:114</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_a173a2eac033e0671a5b317ac3300be8f"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a173a2eac033e0671a5b317ac3300be8f">org.lightjason.agentspeak.language.variable.CVariable.functor</a></div><div class="ttdeci">final String functor()</div><div class="ttdoc">returns the functor without path </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00181">CVariable.java:181</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_acc44ca43258b5fff09ca4f6a8c365488"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#acc44ca43258b5fff09ca4f6a8c365488">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variable</a></div><div class="ttdeci">final void variable()</div><div class="ttdoc">checks the variable structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00199">TestCTermVariablesConstant.java:199</a></div></div>
<div class="ttc" id="namespaceorg_1_1lightjason_1_1agentspeak_htm"><div class="ttname"><a href="../../d6/d55/namespaceorg_1_1lightjason_1_1agentspeak.htm">org.lightjason.agentspeak</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_af93087bdaa1eb258ae07b862b757e4cc"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#af93087bdaa1eb258ae07b862b757e4cc">org.lightjason.agentspeak.language.TestCTermVariablesConstant.constantcopy</a></div><div class="ttdeci">final void constantcopy()</div><div class="ttdoc">test constant copy </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00130">TestCTermVariablesConstant.java:130</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure_htm_ab4d1ffd14fdfeb6600caebe76eb2f576"><div class="ttname"><a href="../../da/dcb/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1IRawStructure.htm#ab4d1ffd14fdfeb6600caebe76eb2f576">org.lightjason.agentspeak.language.IRawStructure.allocated</a></div><div class="ttdeci">boolean allocated()</div><div class="ttdoc">returns allocated state </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_a2fed2b0c5316fc7b0a7a2f77659ac3a0"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a2fed2b0c5316fc7b0a7a2f77659ac3a0">org.lightjason.agentspeak.language.variable.CVariable.hasVariable</a></div><div class="ttdeci">final boolean hasVariable()</div><div class="ttdoc">checks if the literal has variables </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00201">CVariable.java:201</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest_htm"><div class="ttname"><a href="../../db/da9/classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest.htm">org.lightjason.agentspeak.IBaseTest</a></div><div class="ttdoc">base test class with helpers </div><div class="ttdef"><b>Definition:</b> <a href="../../db/deb/IBaseTest_8java_source.htm#l00045">IBaseTest.java:45</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable_htm_ae287ef1aed18b2c65d6e27b9ce187c6d"><div class="ttname"><a href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#ae287ef1aed18b2c65d6e27b9ce187c6d">org.lightjason.agentspeak.language.variable.IVariable.set</a></div><div class="ttdeci">IVariable&lt; T &gt; set( @Nullable final T p_value)</div><div class="ttdoc">sets the value </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest_htm_a153155d721393465604d8e795ad2fc31"><div class="ttname"><a href="../../db/da9/classorg_1_1lightjason_1_1agentspeak_1_1IBaseTest.htm#a153155d721393465604d8e795ad2fc31">org.lightjason.agentspeak.IBaseTest.invoketest</a></div><div class="ttdeci">final void invoketest()</div><div class="ttdoc">invoke all test manually </div><div class="ttdef"><b>Definition:</b> <a href="../../db/deb/IBaseTest_8java_source.htm#l00056">IBaseTest.java:56</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a83ce3fda9f9b289fb2f4b391328a5d87"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a83ce3fda9f9b289fb2f4b391328a5d87">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variablefunctor</a></div><div class="ttdeci">final void variablefunctor()</div><div class="ttdoc">test variable functor </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00230">TestCTermVariablesConstant.java:230</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral_htm"><div class="ttname"><a href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm">org.lightjason.agentspeak.language.ILiteral</a></div><div class="ttdoc">literal interface </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/de4/ILiteral_8java_source.htm#l00039">ILiteral.java:39</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable_htm"><div class="ttname"><a href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm">org.lightjason.agentspeak.language.variable.IVariable</a></div><div class="ttdoc">variable defintion </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d98/IVariable_8java_source.htm#l00039">IVariable.java:39</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath_htm_adcbbdb10315750231c09b30491b552fd"><div class="ttname"><a href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm#adcbbdb10315750231c09b30491b552fd">org.lightjason.agentspeak.common.CPath.from</a></div><div class="ttdeci">static IPath from( @Nonnull final String p_string)</div><div class="ttdoc">factor method to build path </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d76/CPath_8java_source.htm#l00165">CPath.java:165</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_aca4ab34cfc023ea0cf556eccacc84d6e"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#aca4ab34cfc023ea0cf556eccacc84d6e">org.lightjason.agentspeak.language.TestCTermVariablesConstant.rawterm</a></div><div class="ttdeci">final void rawterm()</div><div class="ttdoc">test raw-term structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00083">TestCTermVariablesConstant.java:83</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath_htm"><div class="ttname"><a href="../../d3/d99/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CPath.htm">org.lightjason.agentspeak.common.CPath</a></div><div class="ttdoc">class to create a path structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/d76/CPath_8java_source.htm#l00052">CPath.java:52</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm">org.lightjason.agentspeak.language.TestCTermVariablesConstant</a></div><div class="ttdoc">test for language components </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00044">TestCTermVariablesConstant.java:44</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a403a4f9c9ffe014054803c141fce1bc2"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a403a4f9c9ffe014054803c141fce1bc2">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variableany</a></div><div class="ttdeci">final void variableany()</div><div class="ttdoc">check any variable </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00147">TestCTermVariablesConstant.java:147</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral_htm_a7f59198401ff8cebe3e17971e3f0f36e"><div class="ttname"><a href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#a7f59198401ff8cebe3e17971e3f0f36e">org.lightjason.agentspeak.language.ILiteral.values</a></div><div class="ttdeci">Stream&lt; ITerm &gt; values(final IPath... p_path)</div><div class="ttdoc">returns a stream over value items </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a106e4e4d019e543c2ef5b80b6250c0a9"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a106e4e4d019e543c2ef5b80b6250c0a9">org.lightjason.agentspeak.language.TestCTermVariablesConstant.relocatevariablerelocate</a></div><div class="ttdeci">final void relocatevariablerelocate()</div><div class="ttdoc">test realocated variable </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00292">TestCTermVariablesConstant.java:292</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_aa7c6fd05b3952d52a42481c682fff940"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#aa7c6fd05b3952d52a42481c682fff940">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variablevalueassignable</a></div><div class="ttdeci">final void variablevalueassignable()</div><div class="ttdoc">test exception on value asiable </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00162">TestCTermVariablesConstant.java:162</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm_htm_aeed55c5adc71d437f41af6ba40dc7677"><div class="ttname"><a href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#aeed55c5adc71d437f41af6ba40dc7677">org.lightjason.agentspeak.language.ITerm.fqnfunctor</a></div><div class="ttdeci">IPath fqnfunctor()</div><div class="ttdoc">returns the full-qualified functor with path and name </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a899367cab11bc97ec1487ec47fe0c0e2"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a899367cab11bc97ec1487ec47fe0c0e2">org.lightjason.agentspeak.language.TestCTermVariablesConstant.relocatevariablemutex</a></div><div class="ttdeci">final void relocatevariablemutex()</div><div class="ttdoc">test realocated variable </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00324">TestCTermVariablesConstant.java:324</a></div></div>
<div class="ttc" id="namespaceorg_1_1lightjason_htm"><div class="ttname"><a href="../../d1/de7/namespaceorg_1_1lightjason.htm">org.lightjason</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a6295d78b1b92db23c798d2be9ae11b54"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a6295d78b1b92db23c798d2be9ae11b54">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variablecopy</a></div><div class="ttdeci">final void variablecopy()</div><div class="ttdoc">test variable shallow-copy </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00270">TestCTermVariablesConstant.java:270</a></div></div>
<div class="ttc" id="namespaceorg_1_1lightjason_1_1agentspeak_1_1language_htm"><div class="ttname"><a href="../../d2/d14/namespaceorg_1_1lightjason_1_1agentspeak_1_1language.htm">org.lightjason.agentspeak.language</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d8/df9/language_2CCommon_8java_source.htm#l00024">language/CCommon.java:24</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_a99045eb1954b18d9458f71c13e17b8b3"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a99045eb1954b18d9458f71c13e17b8b3">org.lightjason.agentspeak.language.variable.CVariable.toString</a></div><div class="ttdeci">String toString()</div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00174">CVariable.java:174</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable_htm_afcadb0441134b2d0c6c3afa738e3d269"><div class="ttname"><a href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#afcadb0441134b2d0c6c3afa738e3d269">org.lightjason.agentspeak.language.variable.IVariable.any</a></div><div class="ttdeci">boolean any()</div><div class="ttdoc">flag to define a &quot;any variable&quot; </div></div>
<div class="ttc" id="namespaceorg_1_1lightjason_1_1agentspeak_1_1common_htm"><div class="ttname"><a href="../../d0/d73/namespaceorg_1_1lightjason_1_1agentspeak_1_1common.htm">org.lightjason.agentspeak.common</a></div><div class="ttdef"><b>Definition:</b> <a href="../../da/d59/common_2CCommon_8java_source.htm#l00024">common/CCommon.java:24</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a11584d557e4c5db238aa47907bc2907c"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a11584d557e4c5db238aa47907bc2907c">org.lightjason.agentspeak.language.TestCTermVariablesConstant.main</a></div><div class="ttdeci">static void main(final String[] p_args)</div><div class="ttdoc">main method for testing </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00358">TestCTermVariablesConstant.java:358</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral_htm_ab199d093499d6af1ee4edbb4a38b28d5"><div class="ttname"><a href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#ab199d093499d6af1ee4edbb4a38b28d5">org.lightjason.agentspeak.language.ILiteral.emptyValues</a></div><div class="ttdeci">boolean emptyValues()</div><div class="ttdoc">check for empty values </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a963f065f91400b4ebcfc0dd4a0d8b02b"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a963f065f91400b4ebcfc0dd4a0d8b02b">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variableequals</a></div><div class="ttdeci">final void variableequals()</div><div class="ttdoc">variable equals </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00171">TestCTermVariablesConstant.java:171</a></div></div>
<div class="ttc" id="namespaceorg_htm"><div class="ttname"><a href="../../db/d96/namespaceorg.htm">org</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable_htm_a59a744f432a4f5f86e39dc0a6e8700e4"><div class="ttname"><a href="../../d8/d1a/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1IVariable.htm#a59a744f432a4f5f86e39dc0a6e8700e4">org.lightjason.agentspeak.language.variable.IVariable.mutex</a></div><div class="ttdeci">boolean mutex()</div><div class="ttdoc">flag to check if variable has is concurrency- / thread-safe </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateMutexVariable_htm"><div class="ttname"><a href="../../d9/db9/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateMutexVariable.htm">org.lightjason.agentspeak.language.variable.CRelocateMutexVariable</a></div><div class="ttdoc">class for a mutex relocated variable </div><div class="ttdef"><b>Definition:</b> <a href="../../da/d3c/CRelocateMutexVariable_8java_source.htm#l00040">CRelocateMutexVariable.java:40</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm_htm_a79a6c36b9a6d9fc8cd8a9679300e27d1"><div class="ttname"><a href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a79a6c36b9a6d9fc8cd8a9679300e27d1">org.lightjason.agentspeak.language.ITerm.functor</a></div><div class="ttdeci">String functor()</div><div class="ttdoc">returns the functor without path </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral_htm"><div class="ttname"><a href="../../d6/d08/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral.htm">org.lightjason.agentspeak.language.CLiteral</a></div><div class="ttdoc">default generic literal class for agent beliefs a literal consists of a functor, an optional list of ...</div><div class="ttdef"><b>Definition:</b> <a href="../../d1/de1/CLiteral_8java_source.htm#l00064">CLiteral.java:64</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm_htm_a037c4a7c6111fafc70081ed36d929833"><div class="ttname"><a href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a037c4a7c6111fafc70081ed36d929833">org.lightjason.agentspeak.language.ITerm.raw</a></div><div class="ttdeci">&lt; T &gt; T raw()</div><div class="ttdoc">cast to any raw value type </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_af914b75b4fd5e1d14e87ba3d3bffeb8d"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#af914b75b4fd5e1d14e87ba3d3bffeb8d">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variabletostring</a></div><div class="ttdeci">final void variabletostring()</div><div class="ttdoc">test tostring </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00188">TestCTermVariablesConstant.java:188</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateVariable_htm"><div class="ttname"><a href="../../d7/df2/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CRelocateVariable.htm">org.lightjason.agentspeak.language.variable.CRelocateVariable</a></div><div class="ttdoc">class for a relocated variable </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/d49/CRelocateVariable_8java_source.htm#l00041">CRelocateVariable.java:41</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm_htm_a95c5d82dfc6d8ba46b478b1e5d34f1e5"><div class="ttname"><a href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm#a95c5d82dfc6d8ba46b478b1e5d34f1e5">org.lightjason.agentspeak.language.CRawTerm.from</a></div><div class="ttdeci">static&lt; N &gt; CRawTerm&lt; N &gt; from(final N p_value)</div><div class="ttdoc">factory for a raw term </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d03/CRawTerm_8java_source.htm#l00104">CRawTerm.java:104</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a8500e0573588527d6c0a67994b49e546"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a8500e0573588527d6c0a67994b49e546">org.lightjason.agentspeak.language.TestCTermVariablesConstant.variablemutex</a></div><div class="ttdeci">final void variablemutex()</div><div class="ttdoc">check the mutex variable </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00242">TestCTermVariablesConstant.java:242</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon_htm"><div class="ttname"><a href="../../da/d91/classorg_1_1lightjason_1_1agentspeak_1_1common_1_1CCommon.htm">org.lightjason.agentspeak.common.CCommon</a></div><div class="ttdoc">class for any helper calls </div><div class="ttdef"><b>Definition:</b> <a href="../../da/d59/common_2CCommon_8java_source.htm#l00064">common/CCommon.java:64</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral_htm_a21c3b3bf99c549beac905342eb37602b"><div class="ttname"><a href="../../d6/d08/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CLiteral.htm#a21c3b3bf99c549beac905342eb37602b">org.lightjason.agentspeak.language.CLiteral.from</a></div><div class="ttdeci">static ILiteral from( @Nonnull final String p_functor, @Nullable final ITerm... p_values)</div><div class="ttdoc">factory </div><div class="ttdef"><b>Definition:</b> <a href="../../d1/de1/CLiteral_8java_source.htm#l00161">CLiteral.java:161</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm">org.lightjason.agentspeak.language.variable.CVariable</a></div><div class="ttdoc">default variable definition </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00046">CVariable.java:46</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a6467dee0a5f334b70a8f1ca4fabcd410"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a6467dee0a5f334b70a8f1ca4fabcd410">org.lightjason.agentspeak.language.TestCTermVariablesConstant.constantaccess</a></div><div class="ttdeci">final void constantaccess()</div><div class="ttdoc">test constant access structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00104">TestCTermVariablesConstant.java:104</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant_htm_a2c2743458fb9686e7089f2bebf7cb463"><div class="ttname"><a href="../../d2/d49/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1TestCTermVariablesConstant.htm#a2c2743458fb9686e7089f2bebf7cb463">org.lightjason.agentspeak.language.TestCTermVariablesConstant.literal</a></div><div class="ttdeci">final void literal()</div><div class="ttdoc">test literal structure </div><div class="ttdef"><b>Definition:</b> <a href="../../d4/dfe/TestCTermVariablesConstant_8java_source.htm#l00051">TestCTermVariablesConstant.java:51</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm_htm_a6467e3a0aca6bb84b8fc87bccad833b7"><div class="ttname"><a href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm#a6467e3a0aca6bb84b8fc87bccad833b7">org.lightjason.agentspeak.language.ITerm.hasVariable</a></div><div class="ttdeci">boolean hasVariable()</div><div class="ttdoc">checks if the literal has variables </div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_a77467be5e42d93df3790ead9dad5d9ac"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#a77467be5e42d93df3790ead9dad5d9ac">org.lightjason.agentspeak.language.variable.CVariable.mutex</a></div><div class="ttdeci">boolean mutex()</div><div class="ttdoc">flag to check if variable has is concurrency- / thread-safe </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00130">CVariable.java:130</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant_htm"><div class="ttname"><a href="../../d5/d1c/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CConstant.htm">org.lightjason.agentspeak.language.variable.CConstant</a></div><div class="ttdoc">constant definition </div><div class="ttdef"><b>Definition:</b> <a href="../../d2/daa/CConstant_8java_source.htm#l00039">CConstant.java:39</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm_htm"><div class="ttname"><a href="../../d9/d34/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ITerm.htm">org.lightjason.agentspeak.language.ITerm</a></div><div class="ttdoc">term interface </div><div class="ttdef"><b>Definition:</b> <a href="../../d3/da8/ITerm_8java_source.htm#l00036">ITerm.java:36</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_ab1a2917c7de499149bf3c68e54635910"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ab1a2917c7de499149bf3c68e54635910">org.lightjason.agentspeak.language.variable.CVariable.allocated</a></div><div class="ttdeci">boolean allocated()</div><div class="ttdoc">returns allocated state </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00118">CVariable.java:118</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm_htm"><div class="ttname"><a href="../../dd/d62/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1CRawTerm.htm">org.lightjason.agentspeak.language.CRawTerm</a></div><div class="ttdoc">term structure for simple datatypes </div><div class="ttdef"><b>Definition:</b> <a href="../../d5/d03/CRawTerm_8java_source.htm#l00045">CRawTerm.java:45</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CMutexVariable_htm"><div class="ttname"><a href="../../d4/d76/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CMutexVariable.htm">org.lightjason.agentspeak.language.variable.CMutexVariable</a></div><div class="ttdoc">thread-safe variable </div><div class="ttdef"><b>Definition:</b> <a href="../../df/dab/CMutexVariable_8java_source.htm#l00037">CMutexVariable.java:37</a></div></div>
<div class="ttc" id="interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral_htm_a5daabca8416030ca262bc1365b040b8e"><div class="ttname"><a href="../../dc/da7/interfaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1ILiteral.htm#a5daabca8416030ca262bc1365b040b8e">org.lightjason.agentspeak.language.ILiteral.hasAt</a></div><div class="ttdeci">boolean hasAt()</div><div class="ttdoc">returns if the literal has an @ prefix </div></div>
<div class="ttc" id="namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_htm"><div class="ttname"><a href="../../d9/d62/namespaceorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable.htm">org.lightjason.agentspeak.language.variable</a></div><div class="ttdef"><b>Definition:</b> <a href="../../d2/daa/CConstant_8java_source.htm#l00024">CConstant.java:24</a></div></div>
<div class="ttc" id="classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable_htm_ac352b3d9d73b4f936bbacc618f5d1876"><div class="ttname"><a href="../../d2/d22/classorg_1_1lightjason_1_1agentspeak_1_1language_1_1variable_1_1CVariable.htm#ac352b3d9d73b4f936bbacc618f5d1876">org.lightjason.agentspeak.language.variable.CVariable.raw</a></div><div class="ttdeci">public&lt; N &gt; N raw()</div><div class="ttdoc">cast to any raw value type </div><div class="ttdef"><b>Definition:</b> <a href="../../dc/d92/CVariable_8java_source.htm#l00208">CVariable.java:208</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_68267d1309a1af8e8297ef4c3efbcdba.htm">src</a></li><li class="navelem"><a class="el" href="../../dir_120ed4da3e3217b1e7fc0b4f48568e79.htm">test</a></li><li class="navelem"><a class="el" href="../../dir_97debbc39e3b917fca663601bb2b0709.htm">java</a></li><li class="navelem"><a class="el" href="../../dir_96589a7c16c3e343f1421d4211dea239.htm">org</a></li><li class="navelem"><a class="el" href="../../dir_4a277734df853a199aee4e8ea5127bc7.htm">lightjason</a></li><li class="navelem"><a class="el" href="../../dir_1360ece8acf819a4645fb6821869c6ac.htm">agentspeak</a></li><li class="navelem"><a class="el" href="../../dir_d4a4c66c28ef513bdc6e47d1a6beb146.htm">language</a></li><li class="navelem"><a class="el" href="../../d4/dfe/TestCTermVariablesConstant_8java.htm">TestCTermVariablesConstant.java</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
