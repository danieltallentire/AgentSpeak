<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>LightJason - AgentSpeak(L++): LightJason - AgentSpeak(L++)</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="layout.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">LightJason - AgentSpeak(L++)
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('index.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">LightJason - AgentSpeak(L++) </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><div class="image">
<img src="https://circleci.com/gh/LightJason/AgentSpeak.svg?style=shield" alt="Circle CI"/>
</div>
 <div class="image">
<img src="https://coveralls.io/repos/github/LightJason/AgentSpeak/badge.svg?branch=master" alt="Coverage Status"/>
</div>
<p>Based on the project <a href="http://jason.sourceforge.net/">Jason</a> by Jomi F. HÃ¼bner and Rafael H. Bordini a Java 8 implementation has been build-up with parallel execution calls. The version defines an additional <a href="https://en.wikipedia.org/wiki/AgentSpeak">AgentSpeak(L)</a> grammar based on <a href="http://www.antlr.org/">AntLR</a> for simulating a <a href="https://en.wikipedia.org/wiki/Multi-agent_system">multi-agent system</a> with a fuzzy-based logical calculus and grammar features like lambda expressions. Agent execution based on a mathematical structure to describe an optimizing process by a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">finite-state-machine</a></p>
<ul>
<li><a class="el" href="d8/d86/md_contributing.htm">Contribution Guidelines</a></li>
<li><a class="el" href="de/d86/md_code_of_conduct.htm">Code-of-Conduct</a></li>
</ul>
<h2>Requirements</h2>
<ul>
<li><a href="http://www.java.com/">JRE 1.8</a></li>
</ul>
<h3>Development</h3>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/">JDK 1.8</a></li>
<li><a href="http://maven.apache.org/">Maven 3 or higher</a></li>
<li><a href="http://www.doxygen.org/">Doxygen</a> with <a href="http://www.graphviz.org/">GraphViz</a></li>
<li><a href="http://lightjason.github.io/AgentSpeak/">Source code documentation</a></li>
<li><a href="https://www.openhub.net/p/LightJason-AgentSpeak">Open Hub Code Statistic</a></li>
<li><a href="https://coveralls.io/github/LightJason/AgentSpeak">Coveralls.io Statistic</a></li>
<li><a href="https://libraries.io/github/LightJason/AgentSpeak">Libraries.io Statistic</a></li>
</ul>
<h2>Base Definitions</h2>
<h3><a class="anchor" id="belief"></a>Beliefs</h3>
<ul>
<li>Beliefs implicitly describe the current state of the agent</li>
<li>Beliefs will be updated before the cycle is run (beliefbase uses an update mechanism)</li>
<li>Beliefs must be exists iif an expression is computed (beliefs can be exist on the fly)</li>
<li>Belief addition triggers a plan with the definition <code>+belief</code></li>
<li>Belief retraction triggers a plan with the definition <code>-belief</code></li>
<li>Belief modification with <code>-+</code> does not exists anymore</li>
<li><a href="#variable">Variables</a> within a belief literal will be unified before the belief is added to the beliefbase</li>
</ul>
<h3><a class="anchor" id="action"></a>Actions</h3>
<ul>
<li>Actions will be run immediately</li>
<li>Actions can fail (false) or succeed (true)</li>
<li>There is no difference between internal and external actions</li>
<li>Actions can be also a logical or assignment expression (these are always true)</li>
<li>Actions with <code>@</code>-prefix wil be executed in parallel (each inner action will be run in parallel)</li>
</ul>
<h3><a class="anchor" id="plan"></a>Plans</h3>
<ul>
<li>Plans are <em>sequences of <a href="#action">actions</a>, <a href="#rule">rules</a> and/or achievement / test <a href="#goal">goals</a></em></li>
<li>Plans has got an optional context, that defines a constraint for execution (default is true and matches always)</li>
<li>Plans fail iif an item of the plan fails</li>
<li>Plans returns a boolean value which defines fail (false) and success (true)</li>
<li>Plans run items in sequential order on default</li>
<li>If the plan calls an <em>achievement <a href="#goal">goal</a> addition</em>, the <a href="#goal">goal</a> is added to the global <a href="#goal">goal</a> list and the current plan will be continued, the <em>achievement <a href="#goal">goal</a></em> will be run within the next cycle</li>
<li>An <em>achievement <a href="#goal">goal</a> deletion</em> does not exists anymore</li>
<li>All items results will be concatenated with a logical <em>and</em> to calculate the plan result value</li>
</ul>
<h4><a class="anchor" id="planinternal"></a>Internals Constants</h4>
<ul>
<li>The plan has got additional <a href="#variable">constant variables</a>, that are added in the context condition (values are calculated before plan execution is started)<ul>
<li><em>PlanFail</em> stores the number of fail runs and <em>PlanFailRatio</em> normalized value in [0,1]</li>
<li><em>PlanSuccessful</em> stores the number of successful runs and <em>PlanSuccessfulRatio</em> normalized value in [0,1]</li>
<li><em>PlanRuns</em> number of runs of the plan (fail + successful runs)</li>
</ul>
</li>
</ul>
<h4><a class="anchor" id="fuzzy"></a>Fuzziness</h4>
<ul>
<li>Fuzzy value must be in [0,1]</li>
<li>Each <a href="#action">action</a> in a fuzzy-plan returns also a fuzzy value to define the fuzziness</li>
<li>The <a href="#plan">plan</a> or <a href="#rule">rule</a> result returns true / false and the aggregated fuzzy value</li>
</ul>
<h3><a class="anchor" id="rule"></a>Rules</h3>
<ul>
<li>Rules are similar to <a href="#plan">plans</a> without the context condition</li>
<li>Rules cannot be triggered by a goal, so they must be called from a plan</li>
<li>Rules will be executed with the prefix <code>$</code></li>
<li>Rules run immediatly</li>
<li>Rules run sequentially on default</li>
<li>Rules returns a boolean value which defines fail (false) and success (true)</li>
<li>All items results will be concatinate with a logical <em>and</em> to calculate the plan result value</li>
<li><a href="#variable">Variables</a> will be passed, so if a rules succeed the value of the variable will be passed back to the calling plan</li>
</ul>
<h3><a class="anchor" id="annotation"></a>Rule / Plan Annotation</h3>
<ul>
<li>Annotations can modify a plan / rule behaviour to change runtime semantic</li>
<li>The following annotation can be used<ul>
<li><code>@Constant( AnyValue, 5 )</code> creates the given constant variable</li>
<li><code>@Atomic</code> the plan / rule cannot be fail, it returns always true (only the <a href="#action">actions</a> can fail)</li>
<li><code>@Parallel</code> all items will be run in parallel</li>
</ul>
</li>
</ul>
<h3><a class="anchor" id="goal"></a>Goals</h3>
<ul>
<li>Semantically a goal marks a certain state of the world an agent <em>wishes to bring about</em> [AgentSpeak, p.40]</li>
<li><em>Achievement goals</em> triggers an <em>achievement goal addition</em> which leads to the execution of a corresponding <a href="#plan">plan</a></li>
<li>On agent start, there can exists one <em>initial goal</em> only (like the <code>main</code> function in Java, C/C++)</li>
<li>Each agent can track <em>more than one goal</em> at the same time otherwise the agent idles (the suspending state is not used)</li>
<li>Goals are triggered by external events which will match by the goal name</li>
<li>Goals will be resolved into <a href="#plan">plans</a> with equal name (and allowed context), the <a href="#plan">plan</a> is the intantiiation of the goal</li>
<li>Goals are run in parallel independed from other goals</li>
<li>A goal is a sequence of <a href="#plan">plans</a> which must all finished successfully</li>
<li>A goal is part of exactly one <a href="#intention">intention</a></li>
<li>If a goal can match a <a href="#desire">desire</a> (the goal is near to the desire) it can add an event to match the desire <a href="#belief">belief</a></li>
<li>If the agent is in sleeping / hibernate state and the <code>wakeup</code> method is called, it triggers the wakeup-goal</li>
</ul>
<h4><a class="anchor" id="testgoal"></a>Test Goals</h4>
<ul>
<li>A test goal is an atom with the definition <code>?literal</code></li>
<li>The test return true iif a plan with an equal literal is within the current execution context (current running)</li>
</ul>
<h3><a class="anchor" id="intention"></a>Intentions</h3>
<ul>
<li>An intention is the <em>convex hull</em> of its <a href="#goal">goals</a></li>
<li>The intention is set of of goals, which must exist simultaneously</li>
<li>Intentions cannot be in conflict with other intentions, so there dies not exists any overlaping</li>
</ul>
<h3><a class="anchor" id="desire"></a>Desires</h3>
<ul>
<li>A Desire is a vertex of the edge of all intentions</li>
<li>Desires are defined by a set of beliefs</li>
<li>Desires can be in conflict with other desires, represented that the desires have got a large distance (much as possible)</li>
<li>The desire is successfully reached, iif all beliefs are existing anytime</li>
</ul>
<h3><a class="anchor" id="variable"></a>Variables</h3>
<ul>
<li>Variables are written with an upper-case letter at begin</li>
<li>Thread-safe variables for parallel runtime start with <code>@</code> (at-sign) followed by an upper-case letter</li>
<li>Variables can store a literal or string to call a <a href="#rule">rule</a> or <a href="#plan">plan</a> e.g. <code>!X(3,2)</code> calls a plan or <code>$X(2,1)</code> calls a rule</li>
</ul>
<h3><a class="anchor" id="at-annotation"></a>Action / Term Annotation</h3>
<ul>
<li>In LightJason one can specify HOW actions and terms will be executed / unified.</li>
<li>Concept of <code>action-term-annotation</code>s allows to annotate <code>actions</code>, and <code>terms</code> to perform<ul>
<li>unification (<code>&gt;&gt;</code>)</li>
<li>parallel execution (<code>@</code>), see <a href="#variable">Variables</a> and <em>lambda expressions</em>.</li>
<li>...</li>
</ul>
</li>
<li>If more than one <code>action-term-annotation</code> is needs to be added, they have to be ordered according to the rule: <em>First HOW, then WHAT</em>, e.g. <code>@&gt;&gt;</code> (parallel unification)</li>
<li>To annotate multiple actions/terms brackets <code>(</code>,<code>)</code> can be used. See the following examples</li>
<li>Examples<ul>
<li><code>@&gt;&gt;( foo(X), X &gt; 1 ) &amp;&amp; Value &gt; 0.5</code> (unify <code>foo(X)</code> and <code>X &gt; 1</code> in parallel and if this results in a true statement check whether <code>Value &gt; 0.5</code>)</li>
<li><code>&gt;&gt;foo(X) &amp;&amp; X &gt; 1 &amp;&amp; Value &gt; 0.5</code> (unify <code>foo(X)</code>, then test the following terms sequentially)</li>
</ul>
</li>
</ul>
<h2><a class="anchor" id="graphic"></a>Graphical Representation</h2>
<div class="image">
<img src="bdi.png" alt="bdi.png"/>
<div class="caption">
Structure</div></div>
<h2>Coding - Agent</h2>
<ul>
<li>Agent (ASL) can be defined as a logic program with <a href="#belief">beliefs</a>, <a href="#rule">rules</a> and <a href="#plan">plans</a></li>
<li>The agent execution structure can be described as a <em>finite-state machine</em> which execute the state changing based on an event processing</li>
<li>Agents must be run (triggered) by an external runtime e.g. from an outside system component</li>
<li><a href="#plan">Plans</a> can be bundeled in a <em>plan-bundle</em> which is semantic equal to a class, plan-bundles can be included in an agent</li>
<li>The <a href="https://lightjason.github.io/knowledgebase/differencetojason/">execution semantic</a> in comparation to Jason (see chapter 10.1 [AgentSpeak, p.207]) </li>
</ul>
</div></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
